#!/usr/bin/env python3

import sys
import os
import json
import subprocess

favorite_icons = ['gnome-terminal','firefox','chromium-browser','gyazo','thunderbird','virtualbox','sublime-text-3','unity-control-center']

def package_installed(package):

        #package_installed_cmd = "dpkg-query -W -f='${Status}' $1 2>/dev/null | grep -c 'ok installed')"

    args1 = ['dpkg-query','-W',"-f='${Status}'","$package"]
    args2 = ['grep','-c','ok installed']

    #package_installed = subprocess.check_output(["dpkg-query" "-W" "-f='${Status}'", $1],stdin=subprocess.DEVNULL,stderr=subprocess.DEVNULL, 2>/dev/null | grep -c 'ok installed')"])
        # //package_installed = os.system.(["dpkg-query", "-W", "-f='${Status}'", "$1" 2>/dev/null | grep -c 'ok installed')"])

    process_check = subprocess.Popen(args1, stdout=subprocess.PIPE,stdin=subprocess.DEVNULL,stderr=subprocess.DEVNULL,shell=False)
    process_output = subprocess.Popen(args2, stdin=process_check.stdout,stdout=subprocess.PIPE, shell=False)
    # Allow process_curl to receive a SIGPIPE if process_wc exits.
    process_check.stdout.close()
    return process_output.communicate()[0]

def create_launcher(apps):
    icons_primary = ["unity://running-apps", "unity://expo-icon", "unity://devices"]
    icons_tail = ["application://org.gnome.Nautilus.desktop"]
    icons = []

    for app in apps:
        desktop_entry = "application://" + app + ".desktop"
        
        if package_installed(app):
            icons.append(desktop_entry)


    icons_total = icons_primary + icons + icons_tail

    icons_json = json.dumps(icons_total)

    subprocess.Popen(["gsettings", "set","com.canonical.Unity.Launcher","favorites",str(icons_json)])
    return;

create_launcher(favorite_icons)
